openapi: 3.0.0
info:
  title: '[POKE CODE] API 명세서'
  version: '1.0.0'
  description: '[POKE CODE] API 명세서'
servers:
  - url: 'http://52.79.197.126'


paths:
  /login:
    post:
      summary: 로그인
      requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: id
                  pw:
                    type: string
                    description: password
              example:
                id: "yyss"
                pw: "1234"
      responses:
        200:
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 로그인 결과
                  id:
                    type: string
                    description: 사용자 ID
                  token:
                    type: string
                    description: JWT 인증 토큰
              example:
                result: "success"
                id: "user123"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        401:
          description: 로그인 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 로그인 결과
                  message:
                    type: string
                    description: 결과 메시지
              example:
                result: "fail"
                message: "ID 또는 PW가 틀렸습니다."

  /signUp:
    post:
      summary: 회원가입
      requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: id
                  pw:
                    type: string
                    description: password
                  nickName:
                    type: string
                    description: 닉네임
              example:
                id: "yyss"
                pw: "1234"
                nickName: "yyss"
      responses:
        201:
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 회원가입 결과
                  message:
                    type: string
                    description: 결과 메시지
              example:
                result: "success"
                message: "회원가입 성공"
        409:
          description: 중복된 ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 회원가입 결과
                  message:
                    type: string
                    description: 결과 메시지
              example:
                result: "fail"
                message: "중복된 ID입니다."

  /checkNickName:
    post:
      summary: 닉네임 중복 검사   
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickName:
                  type: string
                  description: ㅇㅇ
            example:
              nickName: "yyyss11"
      responses:
        200:
          description: 사용 가능한 닉네임
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 닉네임 중복 검사 결과
                  message:
                    type: string
                    description: 결과 메시지
              example:
                result: "success"
                message: "사용 가능한 닉네임입니다."
        409:
          description: 중복된 닉네임
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 닉네임 중복 검사 결과
                  message:
                    type: string
                    description: 결과 메시지
              example:
                result: "fail"
                message: "중복된 닉네임입니다."

  /headerData:
    post:
      summary: 헤더 데이터
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      responses:
        200:
          description: 헤더 데이터 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 헤더 데이터 조회 결과
                  message:
                    type: string
                    description: 결과 메시지
              example:
                result: "success"
                message: "데이터 조회 성공"
                user:
                  - bakjoon_id: "ysk"
                    nick_name: "굿"
                    cur_poke_id: 1
                    last_login: "2024-08-18T00:00:00.000Z"
                    user_exp: 1
                    math_coin: 1
                    impl_coin: 1
                    dp_coin: 1
                    data_coin: 1
                    graph_coin: 1
                    exp_index: 1
                    math_exp: 1
                    impl_exp: 1
                    dp_exp: 1
                    data_exp: 1
                    graph_exp: 1
                    book_id: 1
                    poke_id: 1
                    poke_title: "수학 고수"
                    poke_eval: 3
                    poke_legend_yn: 0
                    poke_type: "수학"
                    poke_name: "라이츄"
                    poke_img: "/path"
                    poke_profile_img: "/path"
                    user_level: 1
                user_poketmon:
                  - book_id: 1
                    bakjoon_id: "ysk"
                    poke_id: 1
                    poke_title: "자료구조 초보자"
                    poke_eval: 1
                    poke_legend_yn: 1
                    poke_type: "자료구조"
                    poke_name: "이상해씨"
                    poke_img: "/path"
                    poke_profile_img: "/path"

  /clearPoo:
    post:
      summary: 똥 치우기
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      responses:
        200:
          description: 똥 치우기 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 똥 치우기 결과
              example:
                result: "success"
        400:
          description: 똥 치우기 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 똥 치우기 결과
                  message:
                    type: string
                    description: 똥 치우기 실패 메시지
              example:
                result: "fail"
                message: "업데이트 실패"

  /getPoo:
    post:
      summary: 똥 개수 조회
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      responses:
        200:
          description: 똥 개수 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 똥 개수 조회 결과
                  poo:
                    type: integer
                    description: 똥 개수
              example:
                result: "success"
                poo: 2
        404:
          description: 똥 개수 조회 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 똥 개수 조회 결과
                  message:
                    type: string
                    description: 똥 개수 조회 실패 메시지
              example:
                result: "fail"
                message: "데이터를 찾을 수 없습니다."

  /book:
    get:
      summary: 도감 정보 조회
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      responses:
        200:
          description: 도감 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 도감 정보 조회 결과
              example:
                result: "success"
                book:
                  - book_id: 1
                    bakjoon_id: "ysk"
                    poke_id: 1
                    poke_title: "자료구조 초보자"
                    poke_eval: 1
                    poke_legend_yn: 1
                    poke_type: "자료구조"
                    poke_name: "이상해씨"
                    poke_img: "/path"
                    poke_profile_img: "/path"
                allPoketmon:
                  - idx": 1,
                    poke_name: "이상해씨"
                    poke_type: "자료구조"
                    poke_title: "자료구조 초보자"
                    poke_legend_yn: 1
                    poke_eval: 1
                    poke_img: "/path"
                    poke_profile_img: "/path"
        404:
          description: 도감 정보 조회 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 실패 메시지
              example:
                result: "fail"
                message: "데이터를 찾을 수 없습니다."

  /evolution:
    post:
      summary: 포켓몬 도감 등록 / 현재 포켓몬 설정
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pok_id:
                  type: integer
                  description: 포켓몬 id
            example:
              pok_id: 1 
      responses:
        201:
          description: 포켓몬 도감 등록 / 현재 포켓몬 설정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 요청 결과
                  poke_id:
                    type: integer
                    description: 등록된 포켓몬 id
                  message:
                    type: string
                    description: 성공 메시지
              example:
                result: "success"
                poke_id: 1
                message: "도감 등록 성공"

  /legendGambling:
    post:
      summary: 전설의 포켓몬 뽑기
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coin:
                  type: string
                  description: 뽑기할 유형의 코인 입력. ( math_coin, impl_coin, data_coin, dp_coin, graph_coin )
            example:
              coin: "graph_coin"
      responses:
        201:
          description: 전설의 포켓몬 뽑기 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 뽑기 결과
                  message:
                    type: string
                    description: 뽑기 성공 메시지
                  legendPoketmon:
                    type: string
                    description: 뽑은 포켓몬 유형, 이름
                  poke_id:
                    type: integer
                    description: 뽑은 포켓몬 id
              example:
                result: "success"
                message: "전설의 포켓몬 뽑기에 성공했습니다!!!"
                legendPoketmon: "그래프 : 마나피"
                poke_id: 1
        400:
          description: 뽑기 코인 부족
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 뽑기 결과
                  message:
                    type: string
                    description: 코인 부족 메시지
              example:
                result: "fail"
                message: "코인이 부족합니다!!"
        409:
          description: 이미 해당 유형 전설의 포켓몬을 전부 소유하고 있음
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 뽑기 결과
                  message:
                    type: string
                    description: 실패 메시지
              example:
                result: "fail"
                message: "이미 해당 유형 전설의 포켓몬을 모두 가지고 있습니다."

  /myPage:
    post:
      summary: 마이페이지 사용자 데이터 조회
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      responses:
        200:
          description: 사용자 데이터 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 사용자 데이터 조회 결과
                  nickName:
                    type: string
                    description: 사용자 닉네임
                  curPokeId:
                    type: integer
                    description: 사용자 현재 포켓몬 id
                  resolvedCount:
                    type: integer
                    description: 사용자가 푼 문제 수
                  userLevel:
                    type: integer
                    description: 유저 레벨
                  userCurExp:
                    type: integer
                    description: 유저 현재 경험치
                  userNeedExp:
                    type: integer
                    description: 다음 레벨까지 필요한 경험치
              example:
                result: "success"
                nickName: "굿"
                curPokeId: 1
                resolvedCount: 1
                userLevel: 1
                userCurExp: 60
                userNeedExp: 40
        404:
          description: 사용자 정보 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 사용자 데이터 조회 결과
                  message:
                    type: string
                    description: 사용자 정보 없음 메시지 
              example:
                result: "fail"
                message: "사용자를 찾을 수 없습니다."

  /changeMonster:
    post:
      summary: 현재 포켓몬 변경
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pok_id:
                  type: integer
                  description: 변경할 포켓몬 id
            example:
              pok_id: 1000
      responses:
        200:
          description: 현재 포켓몬 변경 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 현재 포켓몬 변경 결과
                  message:
                    type: string
                    description: 현재 포켓몬 변경 메시지
              example:
                result: "success"
                message: "포켓몬 변경 완료"
        404:
          description: 소유하지 않은 포켓몬
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 현재 포켓몬 변경 결과
                  message:
                    type: string
                    description: 현재 포켓몬 변경 실패 메시지
              example:
                result: "fail"
                message: "소유하지 않은 포켓몬"

  /changeNickName:
    post:
      summary: 사용자 닉네임 수정
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickName:
                  type: string
                  description: 변경할 닉네임
            example:
              nickName: "exampleNickName"
      responses:
        200:
          description: 닉네임 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 닉네임 수정 결과
                  message:
                    type: string
                    description: 닉네임 수정 메시지
              example:
                result: "success"
                message: "닉네임 수정 완료"

  /resolvedProblems:
    get:
      summary: 사용자가 푼 문제 관련 정보
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      responses:
        200:
          description: 푼 문제 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 푼 문제 조회 결과
              example:
                result: "success"
                resolvedProblems:
                  - problem_id: 1
                    get_credit: 1
                    resolved_date: "2024-07-28"
                    get_Exp: 1
                    elapsed_time: 1
                    limit_time: 1
                    problem_title: "피보나치 함수"
        404:
          description: 해결한 문제 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 푼 문제 조회 결과
                  message:
                    type: string
                    description: 푼 문제 없음 메시지
              example:
                result: "fail"
                message: "해결한 문제가 없습니다."

  /problemList:
    get:
      summary: 문제목록 조회
      description: |
        예시 요청
        ```
        GET /problemList?title=피보&order=asc&page=1&sort=level
        ```
        - **title**: 문제 제목
        - **order**: 정렬 방향 (asc 또는 desc)
        - **page**: 페이지 번호 (선택 사항)
        - **sort**: 정렬 기준 컬럼<br><br>
        
        <strong>정렬 기준 컬럼 목록</strong><br>
        id : 문제 번호<br>
        level : 문제 레벨<br>
        title : 문제 이름<br>
        solved : 푼 사람 수<br>
        type : 문제 유형
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
        - in: query
          name: title
          required: true
          schema:
            type: string
          description: |
            검색할 문제 이름
        - in: query
          name: order
          required: true
          schema:
            type: string
          description: |
            정렬 방향 ( 오름차순 : asc, 내림차순 : desc )
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: |
            페이지 번호
        - in: query
          name: sort
          required: true
          schema:
            type: string
          description: |
            정렬 기준 컬럼
      responses:
        200:
          description: 문제목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 문제목록 조회 결과
              example:
                result: "success"
                problem:
                  - id: 1
                    level: 1
                    title: "피보나치 함수"
                    solved: 1
                    type: "DP,수학"
                totalPages: 1
                currentPage: 1
        404:
          description: 문제가 존재하지 않음
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 문제목록 조회 결과
                  message:
                    type: string
                    description: 문제가 존재하지 않음 메시지
              example:
                result: "fail"
                message: "문제가 존재하지 않습니다."

  /runCode:
    post:
      summary: 코드 채점 + 진화 + 전설여부 체크
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bojNumber:
                  type: string
                  description: 문제 번호
                elapsed_time:
                  type: integer
                  description: 경과시간
                limit_time:
                  type: integer
                  description: 제한시간
                correct:
                  type: boolean
                  description: 정답여부
            example:
              bojNumber: "1000"
              elapsed_time: 1
              limit_time: 1
              correct: true
      responses:
        201:
          description: 문제 해결
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 문제 해결 결과
                  message:
                    type: string
                    description: 문제 해결 메시지
                  isCorrect:
                    type: integer
                    description: 정답여부
              example:
                result: "success"
                message: "포켓몬 1마리가 진화했습니다!! 축하합니다!! DP유형 전설의 포켓몬 코인을 획득했습니다!!"
                isCorrect: 1
                evolutionPoketmon:
                  - 
                    - idx: 1
                      poke_name: "라이츄"
                      poke_type: "수학"
                      poke_title: "수학 고수"
                      poke_legend_yn: 1
                      poke_eval: 1
                      poke_img: "/path"
                      poke_profile_img: "/path"
                legendPoketmon:
                  - "DP"
                type1: "dp_exp+100"
                type2: "math_exp+100"

  /selectOrUpdateResolvedProblem:
    post:
      summary: 문제 에디터 입장 시 데이터 갱신
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                problem_id:
                  type: string
                  description: 문제 번호
                problem_title:
                  type: string
                  description: 문제 이름
                limit_time:
                  type: integer
                  description: 제한시간
            example:
              problem_id: "1003"
              problem_title: "피보나치 함수"
              limit_time: 1
      responses:
        201:
          description: 문제 데이터 갱신 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 데이터 갱신 결과
                  message:
                    type: string
                    description: 데이터 갱신 메시지
              example:
                result: "success"
                message: "문제에 처음 도전했습니다. resolved 테이블에 limit_time을 포함한 데이터 추가"

  /setTime:
    post:
      summary: 경과시간, 제한시간 저장
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: |
            JWT Access Token<br><br>
            형태<br>
            `Authorization : Bearer {token}`<br>
            예시<br>
            `Authorization : Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`
      description: |
        <strong>주의사항</strong><br>
        - **limit_time** : 반드시 1 이상의 자연수로 입력
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                elapsed_time:
                  type: integer
                  description: 경과시간
                limit_time:
                  type: integer
                  description: 제한시간
                problem_id:
                  type: string
                  description: 문제번호
            example:
              elapsed_time: 100
              limit_time: 100
              problem_id: "1000"
      responses:
        200:
          description: 경과시간, 제한시간 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: 시간 저장 결과
                  message:
                    type: string
                    description: 시간 저장 메시지
              example:
                result: "success"
                message: "타이머 업데이트 성공"